version: "3.5"

services:

  db:
    image: postgres:alpine
    hostname: db
    restart: on-failure
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./script_psql.sql:/docker-entrypoint-initdb.d/script_psql.sql
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf      
    deploy:
      resources:
        limits:
          cpus: "0.71"
          memory: "0.5GB"

  redis:
    image: redis:latest
    hostname: redis
    restart: on-failure
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - ./:/etc/redis/
    command: ["redis-server", "/etc/redis/redis.conf"] 
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "0.2GB"


  api01: &api
    image: mangar/rinhabe_2023_q3_go:0.0.1
    hostname: api01
    restart: on-failure
    environment:
      - FLAG_DEBUG=False
      - SERVER_NAME=SERVER_01
      - LOG_OUTPUT_DIR=/app-log
      - DB_CONNECTION=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - REDIS_CONNECTION=redis:6379
      - REDIS_PASSWORD=""      
      - REDIS_POOL_SIZE=5000
      - REDIS_MIN_IDLE_CONNS=1000
      - WEB_PORT=3000
    volumes:
      - ./:/app-log      
    ports:
      - "3001:8000"
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "200MB"

  api02:
    <<: *api 
    hostname: api02
    environment:
      - FLAG_DEBUG=False
      - SERVER_NAME=SERVER_02
      - LOG_OUTPUT_DIR=/app-log
      - DB_CONNECTION=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - REDIS_CONNECTION=redis:6379
      - REDIS_PASSWORD=""      
      - REDIS_POOL_SIZE=5000
      - REDIS_MIN_IDLE_CONNS=1000        
      - WEB_PORT=3000
    volumes:
      - ./:/app-log            
    ports:
      - "3002:8000"
 
  api03:
    <<: *api 
    hostname: api03
    environment:
      - FLAG_DEBUG=False
      - SERVER_NAME=SERVER_03
      - LOG_OUTPUT_DIR=/app-log
      - DB_CONNECTION=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - REDIS_CONNECTION=redis:6379
      - REDIS_PASSWORD=""      
      - REDIS_POOL_SIZE=5000
      - REDIS_MIN_IDLE_CONNS=1000        
      - WEB_PORT=3000
    volumes:
      - ./:/app-log            
    ports:
      - "3003:8000"

  api04:
    <<: *api 
    hostname: api04
    environment:
      - FLAG_DEBUG=False
      - SERVER_NAME=SERVER_04
      - LOG_OUTPUT_DIR=/app-log
      - DB_CONNECTION=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - REDIS_CONNECTION=redis:6379
      - REDIS_PASSWORD=""      
      - REDIS_POOL_SIZE=5000
      - REDIS_MIN_IDLE_CONNS=1000        
      - WEB_PORT=3000
    volumes:
      - ./:/app-log            
    ports:
      - "3004:8000"



  nginx:
    image: nginx:latest
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999" 
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "500MB"




# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2023q3
